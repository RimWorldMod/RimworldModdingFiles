<?xml version="1.0" encoding="utf-8" ?>
<Defs>
  <RulePackDef>
    <defName>Maneuver_Slash</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf(p=4)->slash</li>
        <li>damaged_inf->cut</li>
        <li>damaged_inf->chop</li>
        <li>damaged_inf->hack</li>
        <li>damaged_inf->slice</li>
        <li>damaged_inf(deflected!=True)->gash</li>

        <li>damaged_past(p=4)->slashed</li>
        <li>damaged_past->cut</li>
        <li>damaged_past->chopped</li>
        <li>damaged_past->hacked</li>
        <li>damaged_past->sliced</li>
        <li>damaged_past(deflected!=True)->gashed</li>

        <li>damaged_present->slashing</li>
        <li>damaged_present->cutting</li>
        <li>damaged_present->slicing</li>
        <li>damaged_present(deflected!=True)->gashing</li>
        <li>damaged_present(deflected!=True)->tearing</li>
        <li>damaged_present(deflected!=True)->lacerating</li>

        <li>woundname->wound</li>
        <li>woundname(p=0.3)->opening</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
        <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>

        <li>destroyed_past->bisected</li>
        <li>destroyed_past->divided</li>
        <li>destroyed_past->halved</li>
        <li>destroyed_past->separated</li>
        <li>destroyed_past->split</li>

        <li>destroyed_present->bisecting</li>
        <li>destroyed_present->dividing</li>
        <li>destroyed_present->halving</li>
        <li>destroyed_present->separating</li>
        <li>destroyed_present->splitting</li>

        <li>destroyed_suffix->into neat pieces</li>
        <li>destroyed_suffix->cleanly</li>
        <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
        <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Slash_MeleeHit</defName>
    <include>
      <li>Maneuver_Slash</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Slash_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Slash</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Slash_MeleeMiss</defName>
    <include>
      <li>Maneuver_Slash</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Slash_MeleeDodge</defName>
    <include>
      <li>Maneuver_Slash</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>

  <RulePackDef>
    <defName>Maneuver_Stab</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf(p=4)->stab</li>
        <li>damaged_inf->jab</li>
        <li>damaged_inf(deflected!=True)->pierce</li>
        <li>damaged_inf(deflected!=True)->puncture</li>
        <li>damaged_inf(deflected!=True)->skewer</li>

        <li>damaged_past(p=4)->stabbed</li>
        <li>damaged_past->jabbed</li>
        <li>damaged_past(deflected!=True)->pierced</li>
        <li>damaged_past(deflected!=True)->punctured</li>
        <li>damaged_past(deflected!=True)->skewered</li>

        <li>damaged_present(deflected!=True)->piercing</li>
        <li>damaged_present(deflected!=True)->puncturing</li>
        <li>damaged_present(deflected!=True)->penetrating</li>
        <li>damaged_present(deflected!=True)->skewering</li>

        <li>woundname->hole</li>
        <li>woundname->wound</li>
        <li>woundname->crevice</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>

        <li>destroyed_past->impaled</li>
        <li>destroyed_past->perforated</li>
        <li>destroyed_past->skewered</li>

        <li>destroyed_present->impaling</li>
        <li>destroyed_present->perforating</li>
        <li>destroyed_present->skewering</li>

        <li>destroyed_suffix->straight through</li>
        <li>destroyed_suffix->leaving a clean hole</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
        <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Stab_MeleeHit</defName>
    <include>
      <li>Maneuver_Stab</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Stab_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Stab</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Stab_MeleeMiss</defName>
    <include>
      <li>Maneuver_Stab</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Stab_MeleeDodge</defName>
    <include>
      <li>Maneuver_Stab</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>
  
  <RulePackDef>
    <defName>Maneuver_Smash_Damage</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf->hit</li>
        <li>damaged_inf->smash</li>
        <li>damaged_inf->bash</li>
        <li>damaged_inf->slam</li>
        <li>damaged_inf->strike</li>
        <li>damaged_inf->beat</li>

        <li>damaged_past->hit</li>
        <li>damaged_past->smashed</li>
        <li>damaged_past->bashed</li>
        <li>damaged_past->slammed</li>
        <li>damaged_past->struck</li>
        <li>damaged_past->beat</li>

        <li>damaged_present->smashing</li>
        <li>damaged_present->bashing</li>
        <li>damaged_present(deflected!=True)->bruising</li>
        
        <li>destroyed_past->shattered</li>
        <li>destroyed_past->crushed</li>
        <li>destroyed_past->broke</li>

        <li>destroyed_present->shattering</li>
        <li>destroyed_present->crushing</li>
        <li>destroyed_present->breaking</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash</defName>
    <include>
      <li>Maneuver_Smash_Damage</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
        <li>flavortext_consequence->leaving the area visibly deformed</li>
        <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
        <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>

        <li>destroyed_suffix->[to] pieces</li>
        <li>destroyed_suffix->[to] bits</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
        <li>destroyed_suffix->[to] fragments</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash_MeleeHit</defName>
    <include>
      <li>Maneuver_Smash</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Smash</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash_MeleeMiss</defName>
    <include>
      <li>Maneuver_Smash</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash_MeleeDodge</defName>
    <include>
      <li>Maneuver_Smash</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>
  
  <RulePackDef>
    <defName>Maneuver_Scratch_Damage</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf(p=4)->scratch</li>
        <li>damaged_inf(deflected!=True)->lacerate</li>
        <li>damaged_inf(deflected!=True)->tear</li>
        <li>damaged_inf->cut</li>

        <li>damaged_past(p=4)->scratched</li>
        <li>damaged_past(deflected!=True)->lacerated</li>
        <li>damaged_past(deflected!=True)->tore</li>
        <li>damaged_past->cut</li>

        <li>damaged_present->scratching</li>
        <li>damaged_present(deflected!=True)->lacerating</li>
        <li>damaged_present(deflected!=True)->tearing</li>
        <li>damaged_present->cutting</li>

        <li>destroyed_past->mauled</li>
        <li>destroyed_past->lacerated</li>
        <li>destroyed_past->tore</li>
        <li>destroyed_past->shredded</li>
        <li>destroyed_past->ripped</li>

        <li>destroyed_present->mauling</li>
        <li>destroyed_present->lacerating</li>
        <li>destroyed_present->tearing</li>
        <li>destroyed_present->shredding</li>
        <li>destroyed_present->ripping</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Maneuver_Scratch</defName>
    <include>
      <li>Maneuver_Scratch_Damage</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>woundname->wound</li>
        <li>woundname(p=0.3)->opening</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
        <li>flavortext_consequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>

        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
        <li>destroyed_suffix->[to] strips</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
        <li>destroyed_suffix->[to] pieces</li>
        <li>destroyed_suffix->[to] fragments</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch_MeleeHit</defName>
    <include>
      <li>Maneuver_Scratch</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Scratch</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch_MeleeMiss</defName>
    <include>
      <li>Maneuver_Scratch</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch_MeleeDodge</defName>
    <include>
      <li>Maneuver_Scratch</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>
  
  <RulePackDef>
    <defName>Maneuver_Poke</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf(p=2)->poke</li>
        <li>damaged_inf(p=2)->jab</li>
        <li>damaged_inf->prod</li>
        <li>damaged_inf->shove</li>
        <li>damaged_inf->stab</li>

        <li>damaged_past(p=2)->poked</li>
        <li>damaged_past(p=2)->jabbed</li>
        <li>damaged_past->prodded</li>
        <li>damaged_past->shoved</li>
        <li>damaged_past->stabbed</li>

        <li>damaged_present(p=2)->poking</li>
        <li>damaged_present(p=2)->jabbing</li>
        <li>damaged_present->prodding</li>
        <li>damaged_present->shoving</li>
        <li>damaged_present->stabbing</li>

        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
        <li>flavortext_consequence->leaving the area visibly deformed</li>
        <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
        <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>

        <li>destroyed_past->shattered</li>
        <li>destroyed_past->crushed</li>
        <li>destroyed_past->obliterated</li>
        <li>destroyed_past->annihilated</li>
        <li>destroyed_past->broke</li>

        <li>destroyed_present->shattering</li>
        <li>destroyed_present->crushing</li>
        <li>destroyed_present->obliterating</li>
        <li>destroyed_present->annihilating</li>
        <li>destroyed_present->breaking</li>

        <li>destroyed_suffix->[to] pieces</li>
        <li>destroyed_suffix->[to] bits</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
        <li>destroyed_suffix->[to] fragments</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Poke_MeleeHit</defName>
    <include>
      <li>Maneuver_Poke</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Poke_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Poke</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Poke_MeleeMiss</defName>
    <include>
      <li>Maneuver_Poke</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Poke_MeleeDodge</defName>
    <include>
      <li>Maneuver_Poke</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>
  
  <RulePackDef>
    <defName>Maneuver_Bite</defName>
    <rulePack>
      <rulesStrings>
        <li>damaged_inf->bite</li>
        <li>damaged_inf->chomp</li>
        <li>damaged_inf(p=0.5)->nip</li>

        <li>damaged_past->bit</li>
        <li>damaged_past->chomped</li>
        <li>damaged_past->nipped</li>
        <li>damaged_past->gnawed</li>
        <li>damaged_past(deflected!=True)->tore</li>

        <li>damaged_present->biting</li>
        <li>damaged_present->chomping</li>
        <li>damaged_present->nipped</li>
        <li>damaged_present->gnawing</li>
        <li>damaged_present(deflected!=True)->tearing</li>

        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
        <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
        <li>flavortext_consequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>

        <li>destroyed_past->tore off</li>
        <li>destroyed_past->ripped off</li>
        <li>destroyed_past->bit off</li>

        <li>destroyed_present->tearing off</li>
        <li>destroyed_present->ripping off</li>
        <li>destroyed_present->biting off</li>

        <li>destroyed_suffix->[to] pieces</li>
        <li>destroyed_suffix->[to] bits</li>
        <li>destroyed_suffix->[to] chunks</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] shreds</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] strips</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
        <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Bite_MeleeHit</defName>
    <include>
      <li>Maneuver_Bite</li>
      <li>Combat_Hit</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Bite_MeleeDeflect</defName>
    <include>
      <li>Maneuver_Bite</li>
      <li>Combat_Deflect</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Bite_MeleeMiss</defName>
    <include>
      <li>Maneuver_Bite</li>
      <li>Combat_Miss</li>
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Bite_MeleeDodge</defName>
    <include>
      <li>Maneuver_Bite</li>
      <li>Combat_Dodge</li>
    </include>
  </RulePackDef>

  <RulePackDef>
    <defName>Maneuver_KickMaterialInEyes_MeleeHit</defName>
    <rulePack>
      <rulesStrings>
        <li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
        <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_KickMaterialInEyes_MeleeDeflect</defName>
    <include>
      <li>Maneuver_KickMaterialInEyes_MeleeMiss</li>  <!-- I'm pretty sure this can't actually happen -->
    </include>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_KickMaterialInEyes_MeleeMiss</defName>
    <rulePack>
      <rulesStrings>
        <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_KickMaterialInEyes_MeleeDodge</defName>
    <rulePack>
      <rulesStrings>
        <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>
        <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
</Defs>
