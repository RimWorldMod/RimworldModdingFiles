<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <RulePackDef>
    <defName>Combat_Hit</defName>
    <include>
      <li>Combat_MeleeIncludes</li>
      <li>Combat_MeleeDamageIncludes</li>
      <li>Combat_WoundIncludes</li>
      <li>Combat_SkillIncludes</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>r_logentry(p=1.0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</li>
        <li>r_logentry(p=0.4)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [strikeAdv].</li>
        <li>r_logentry(p=0.4)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label], [flavortext_consequence].</li>
        <li>r_logentry(p=0.4)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</li>
        <li>r_logentry(p=0.2)->[INITIATOR_definite], [skillDescMelee], [strikeAdv] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</li>
        <!-- combined high priority, if we destroyed something -->
        <li>r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets].</li>
        <li>r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] [destroyed_suffix].</li>
        <li>r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] with [implement].</li>
        <!-- When recipient_part_count is 0. This occurs with inanimate objects. -->
        <li>r_logentry(p=1,recipient_part_count==0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] with [implement].</li>
        <li>r_logentry(p=0.4,recipient_part_count==0)->[INITIATOR_definite] [skillAdv] [damaged_past] [RECIPIENT_definite] with [implement].</li>

        <li>result(p=1,recipient_part_damaged_count==0)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets]</li>
        <li>result(p=1,recipient_part_destroyed_count==0)->[damaged_present] [RECIPIENT_possessive] [damaged_targets]</li>
        <li>result(p=1)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets] and [damaged_present] [RECIPIENT_possessive] [damaged_targets]</li>
        
        <li>action(p=1.0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] with [implement]</li>
        <li>action(p=0.3)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite]</li>
        <li>action(p=0.3)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite]</li>
        <li>action(p=0.3)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement]</li>
        <li>action(p=0.3)->[INITIATOR_definite], [skillDescMelee], hit [RECIPIENT_definite] with a [damaged_inf] from [implement]</li>
        <li>action(p=0.3)->[INITIATOR_definite] used [implement] to [damaged_inf] [RECIPIENT_definite]</li>
        <li>action(p=0.3)->[INITIATOR_definite] used [implement] [skillAdv] to [damaged_inf] [RECIPIENT_definite]</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_Deflect</defName>
    <include>
      <li>Combat_MeleeIncludes</li>
      <li>Combat_DeflectIncludes</li>
      <li>Combat_SkillIncludes</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>r_logentry(p=0.5)->[INITIATOR_definite] [damaged_past] [atMaybe] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] [skillAdvMaybe] [damaged_past] [atMaybe] [RECIPIENT_definite] with [implement] [deflected_result].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] [skillAdvMaybe] [damaged_past] [atMaybe] [RECIPIENT_definite] [deflected_result].</li>
        <li>r_logentry(p=0.1)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result].</li>
        <li>r_logentry(p=0.1)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement] [deflected_result].</li>
        <li>r_logentry(p=0.1)->[INITIATOR_definite] [skillAdvMaybe] used [implement] to [damaged_inf] [RECIPIENT_definite] [deflected_result].</li>

        <li>skillAdvMaybe-></li>
        <li>skillAdvMaybe->[skillAdv]</li>

        <li>atMaybe-></li>
        <li>atMaybe->at</li> <!-- this fails with impact verbs like bash, smash, cut, hit -->
        
        <li>deflected_result->, but the [TOOL_label] [deflected] off [harmlessly_opt]</li>
        <li>deflected_result->, [deflecting] off [RECIPIENT_possessive] armor [harmlessly_opt]</li>

        <li>harmlessly_opt(p=4)-></li>
        <li>harmlessly_opt->[harmlessly]</li>

        <li>harmlessly->harmlessly</li>
        <li>harmlessly->uselessly</li>

        <li>deflected->deflected</li>
        <li>deflected->scraped</li>
        <li>deflected->slid</li>
        <li>deflected->grazed</li>
        <li>deflected->bounced</li>
        <li>deflected->glanced</li>

        <li>deflecting->deflecting</li>
        <li>deflecting->scraping</li>
        <li>deflecting->sliding</li>
        <li>deflecting->grazing</li>
        <li>deflecting->bouncing</li>
        <li>deflecting->glancing</li>

      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_Miss</defName>
    <include>
      <li>Combat_MeleeIncludes</li>
      <li>Combat_FailIncludes</li>
      <li>Combat_SkillIncludes</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>r_logentry(p=0.3)->[RECIPIENT_definite] avoided [INITIATOR_definite]'s [WEAPON_label] [damaged_inf].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] missed [RECIPIENT_definite] with a [damaged_inf] from [implement].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite] with [implement].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite].</li>
        <li>r_logentry(p=0.3)->[INITIATOR_definite] tried [skillAdvMaybe] to [damaged_inf] [RECIPIENT_definite], but [failtype].</li>

        <li>skillAdvMaybe-></li>
        <li>skillAdvMaybe->[skillAdv]</li>

        <li>failtype(p=5)->missed</li>
        <li>failtype->stumbled</li>
        <li>failtype->tripped</li>
        <li>failtype->flailed</li>
        <li>failtype->floundered</li>

        <li>result(p=4)->but missed</li>
        <li>result->but hit only air</li>
        <li>result->but the swing went wide</li>
        <li>result->but stumbled at the last second</li>
        <li>result(initiator_flesh!=Mechanoid)->but hesitated at the last second</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_Dodge</defName>
    <include>
      <li>Combat_MeleeIncludes</li>
      <li>Combat_FailIncludes</li>
      <li>Combat_SkillIncludes</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li>r_logentry(p=0.5)->[RECIPIENT_definite] [skillAdvMaybe] dodged [INITIATOR_definite]'s [damaged_inf] from [implement].</li>
        <li>r_logentry(p=0.5)->[RECIPIENT_definite] [skillAdvMaybe] dodged [INITIATOR_definite]'s [damaged_inf].</li>

        <li>skillAdvMaybe-></li>
        <li>skillAdvMaybe->[skillAdv]</li>

        <li>result->but [RECIPIENT_definite] leapt out of the way</li>
        <li>result->but was deceived by [RECIPIENT_definite]'s feint</li>
        <li>result->but the attack was cleverly avoided</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  
</Defs>
