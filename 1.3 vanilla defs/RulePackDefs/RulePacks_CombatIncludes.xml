<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <RulePackDef>
    <defName>Combat_MeleeIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>r_logentry->[action], [result].</li>
        <li>r_logentry(priority=-10)->[action].</li> <!-- Sometimes, we do not have a result - for example a rat gnawing a door does not have any result. -->

        <li>implement(IMPLEMENTOWNER_type==weapon,p=2)->[INITIATOR_possessive] [WEAPON_label]'s [TOOL_label]</li>
        <li>implement(IMPLEMENTOWNER_type==weapon,p=1)->[INITIATOR_possessive] [WEAPON_label]</li>
        <li>implement(IMPLEMENTOWNER_type==weapon,p=1)->a [WEAPON_label]'s [TOOL_label]</li>
        <li>implement(IMPLEMENTOWNER_type==weapon,p=0.5)->a [WEAPON_label]</li>

        <li>implement(IMPLEMENTOWNER_type==bodypart,p=2)->[INITIATOR_possessive] [TOOL_label]</li>

        <li>implement(IMPLEMENTOWNER_type==hediff,p=2)->[INITIATOR_possessive] [WEAPON_label]'s [TOOL_label]</li>
        <li>implement(IMPLEMENTOWNER_type==hediff,p=1)->[INITIATOR_possessive] [WEAPON_label]</li>
        <li>implement(IMPLEMENTOWNER_type==hediff,p=1)->[INITIATOR_possessive] [TOOL_label]</li>

        <li>targetlist(recipient_part_count==1)->[recipient_part0_label]</li>
        <li>targetlist(recipient_part_count==2)->[recipient_part0_label] and [recipient_part1_label]</li>
        <li>targetlist(recipient_part_count==3)->[recipient_part0_label], [recipient_part1_label], and [recipient_part2_label]</li>
        <li>targetlist->[recipient_part0_label], [recipient_part1_label], [recipient_part2_label], and [recipient_part3_label]</li>
        <!-- don't include constraint; this acts as a fallback for >=4-->

        <li>damaged_present(deflected!=True)->wounding</li>
        <li>damaged_present(deflected!=True)->injuring</li>

        <li>destroyed(p=0.5)->destroyed</li>
        <li>destroyed(p=0.5)->demolished</li>
        <li>destroyed(p=0.5)->ruined</li>
        <li>destroyed(p=0.5)->wrecked</li>

        <li>wince(recipient_flesh==Normal)->wince</li>
        <li>wince(recipient_flesh==Normal)->grimace</li>
        <li>wince(recipient_flesh==Normal)->cringe</li>
        <li>wince(recipient_flesh==Normal)->groan</li>
        <li>wince(recipient_flesh!=Mechanoid)->scream</li>
        <li>wince(recipient_flesh!=Mechanoid)->shout</li>
        <li>wince->recoil</li>
        <li>wince->stumble</li>

        <li>painstate->in</li>
        <li>painstate->with</li>
        <li>painstate->from the</li>

        <li>painevent(recipient_flesh!=Mechanoid)->[painstate] pain</li>
        <li>painevent(recipient_flesh!=Mechanoid)->[painstate] agony</li>
        <li>painevent(recipient_flesh==Normal)->with misery</li>
        <li>painevent->from the injury</li>
        <li>painevent->from the wound</li>

        <li>to->to</li>
        <li>to->into</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_MeleeDamageIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>result(p=1)->[damaged_present] [RECIPIENT_possessive] [targetlist]</li>
        <li>result(p=0.2)->[damaged_present] [RECIPIENT_possessive] [targetlist] and [flavortext_consequence]</li>
        <li>result(p=0.1)->[damaged_present] [RECIPIENT_possessive] [targetlist] [strikeAdv]</li>
        
        <li>strikeAdv->painfully</li>
        <li>strikeAdv->horribly</li>
        <li>strikeAdv->savagely</li>
        <li>strikeAdv->viciously</li>

        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a disgusting wound</li>
        <li>flavortext_consequence->leaving a horrific wound</li>
        
        <li>flavortext_consequence(recipient_flesh!=Mechanoid)->making [RECIPIENT_objective] [wince] [painevent]</li>
        <li>flavortext_consequence(p=0.2)->throwing [RECIPIENT_objective] off balance</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_WoundIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>destroyed_targets(recipient_part_destroyed_count==1)->[recipient_part_destroyed0_label]</li>
        <li>destroyed_targets(recipient_part_destroyed_count==2)->[recipient_part_destroyed0_label] and [recipient_part_destroyed1_label]</li>
        <li>destroyed_targets(recipient_part_destroyed_count==3)->[recipient_part_destroyed0_label], [recipient_part_destroyed1_label], and [recipient_part_destroyed2_label]</li>
        <li>destroyed_targets->[recipient_part_destroyed0_label], [recipient_part_destroyed1_label], [recipient_part_destroyed2_label], and [recipient_part_destroyed3_label]</li> <!-- fallback for 4+ -->

        <li>damaged_targets(recipient_part_damaged_count==1)->[recipient_part_damaged0_label]</li>
        <li>damaged_targets(recipient_part_damaged_count==2)->[recipient_part_damaged0_label] and [recipient_part_damaged1_label]</li>
        <li>damaged_targets(recipient_part_damaged_count==3)->[recipient_part_damaged0_label], [recipient_part_damaged1_label], and [recipient_part_damaged2_label]</li>
        <li>damaged_targets->[recipient_part_damaged0_label], [recipient_part_damaged1_label], [recipient_part_damaged2_label], and [recipient_part_damaged3_label]</li> <!-- fallback for 4+ -->
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_SkillIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>skillDescMelee->[wielding] [INITIATOR_possessive] [WEAPON_label] [skillAdv]</li> <!-- armed -->
        <li>skillDescMelee->[using] [implement] [skillAdv]</li> <!-- unarmed -->

        <li>wielding(p=4)->wielding</li>
        <li>wielding(p=3)->using</li>
        <li>wielding(p=2)->handling</li>
        <li>wielding->brandishing</li>
        <li>wielding->manipulating</li>

        <li>using(p=4)->using</li>
        <li>using->driving</li>
        <li>using->thrusting</li>
        <li>using->utilizing</li>
        <li>using->moving</li>

        <li>skillAdv(INITIATOR_skill&lt;=3)->incompetently</li>
        <li>skillAdv(INITIATOR_skill&lt;=3)->ineptly</li>
        <li>skillAdv(INITIATOR_skill&lt;=3)->wildly</li>
        <li>skillAdv(INITIATOR_skill&lt;=3)->randomly</li>
        <li>skillAdv(INITIATOR_skill&lt;=3)->flailingly</li>
        <li>skillAdv(INITIATOR_skill&lt;=4)->awkwardly</li>
        <li>skillAdv(INITIATOR_skill&lt;=4)->clumsily</li>
        <li>skillAdv(INITIATOR_skill&lt;=5)->fearfully</li>
        <li>skillAdv(INITIATOR_skill&lt;=5)->falteringly</li>
        <li>skillAdv(INITIATOR_skill&lt;=5)->foolishly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->hesitantly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->reluctantly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->slowly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->tentatively</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->inexpertly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->amateurishly</li>
        <li>skillAdv(INITIATOR_skill&lt;=6)->timidly</li>
        <li>skillAdv(INITIATOR_skill&lt;=8)->enthusiastically</li>
        <li>skillAdv(INITIATOR_skill>=6,INITIATOR_skill&lt;=10)->proficiently</li>
        <li>skillAdv(INITIATOR_skill>=6,INITIATOR_skill&lt;=10)->competently</li>
        <li>skillAdv(INITIATOR_skill>=8)->professionally</li>
        <li>skillAdv(INITIATOR_skill>=8)->deftly</li>
        <li>skillAdv(INITIATOR_skill>=8)->aptly</li>
        <li>skillAdv(INITIATOR_skill>=8)->cleverly</li>
        <li>skillAdv(INITIATOR_skill>=8)->dexterously</li>
        <li>skillAdv(INITIATOR_skill>=8)->skillfully</li>
        <li>skillAdv(INITIATOR_skill>=10)->adeptly</li>
        <li>skillAdv(INITIATOR_skill>=10)->slickly</li>
        <li>skillAdv(INITIATOR_skill>=12)->expertly</li>
        <li>skillAdv(INITIATOR_skill>=12)->precisely</li>
        <li>skillAdv(INITIATOR_skill>=14)->masterfully</li>
        <li>skillAdv(INITIATOR_skill>=16)->artistically</li>
        <li>skillAdv(INITIATOR_skill>=16)->gracefully</li>

        <li>skillAdv(initiator_flesh==Mechanoid)->mechanically</li>
        <li>skillAdv(initiator_flesh==Mechanoid)->robotically</li>
        <li>skillAdv(initiator_flesh==Mechanoid)->directly</li>

      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_FailIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>action->[INITIATOR_definite] [tried] to [damaged_inf] [RECIPIENT_definite]</li>
        <li>action->[INITIATOR_definite] [tried] to [damaged_inf] [RECIPIENT_definite] with [implement]</li>
        <li>action->[INITIATOR_definite] [tried] to use [implement] to [damaged_inf] [RECIPIENT_definite]</li>
        <li>action->[INITIATOR_definite] swung [INITIATOR_possessive] [WEAPON_label] at [RECIPIENT_definite]</li>
        <li>action(p=0.3)->[INITIATOR_definite] [verb_genericattack] [towardsat] [RECIPIENT_definite] with [implement]</li>
        <li>action(p=0.3)->[INITIATOR_definite] [verb_genericattack] [towardsat] [RECIPIENT_definite]</li>
        <li>action(p=0.3)->[INITIATOR_definite] [verb_genericattack] with [implement]</li>

        <li>towardsat->towards</li>
        <li>towardsat->at</li>
        
        <li>verb_genericattack->swung</li>
        <li>verb_genericattack->flailed</li>
        <li>verb_genericattack->thrashed</li>

        <li>tried->tried</li>
        <li>tried->attempted</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

  <RulePackDef>
    <defName>Combat_DeflectIncludes</defName>
    <rulePack>
      <rulesStrings>
        <li>scraped_present->glancing</li>
        <li>scraped_present->bouncing</li>
        <li>scraped_present->grazing</li>
        <li>scraped_present->caroming</li>
        <li>scraped_present->skipping</li>
        <li>scraped_present->skating</li>

        <li>scraped_past->glanced</li>
        <li>scraped_past->bounced</li>
        <li>scraped_past->grazed</li>
        <li>scraped_past->caromed</li>
        <li>scraped_past->skipped</li>
        <li>scraped_past->skated</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>

</Defs>