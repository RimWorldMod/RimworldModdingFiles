<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <!--============= Main colonist behavior core ============-->
  
  <ThinkTreeDef>
    <defName>MainColonistBehaviorCore</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>SatisfyingNeeds</tagToGive> <!-- note that JobGiver_Work will assign its own tag -->
      <subNodes>
        <li Class="ThinkNode_PrioritySorter">
          <subNodes>
            <li Class="JobGiver_GetFood"/>
            <li Class="JobGiver_GetRest"/>
            <li Class="JobGiver_SatisfyChemicalNeed"/>
            <li Class="JobGiver_TakeDrugsForDrugPolicy"/>
            <li Class="JobGiver_MoveDrugsToInventory"/>
            <li Class="JobGiver_GetNeuralSupercharge"/>
            <li Class="JobGiver_MeditateInBed"/>
            <li Class="ThinkNode_Priority_GetJoy">
              <subNodes>
                <li Class="JobGiver_GetJoy"/>
                <li Class="JobGiver_GetJoyInBed"/>
              </subNodes>
            </li>
            <li Class="JobGiver_Meditate"/>
            <li Class="JobGiver_Reload"/>
            <li Class="JobGiver_Work"/>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <!--============= Main wild man behavior core ============-->
  
  <ThinkTreeDef>
    <defName>MainWildManBehaviorCore</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Leave the colony -->
        <li Class="ThinkNode_ConditionalWildManNeedsToReachOutside">
          <subNodes>
            <li Class="JobGiver_ReachOutside" />
          </subNodes>
        </li>

        <!-- Drop random gear or apparel -->
        <li Class="ThinkNode_ChancePerHour_Constant">
          <mtbHours>10</mtbHours>
          <subNodes>
            <li Class="JobGiver_DropRandomGearOrApparel"/>
          </subNodes>
        </li>

        <!-- Satisfy needs -->
        <li Class="ThinkNode_Tagger">
          <tagToGive>SatisfyingNeeds</tagToGive>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood"/>
                <li Class="JobGiver_GetRest"/>
                <li Class="JobGiver_SatisfyChemicalNeed"/>
                <li Class="ThinkNode_Priority_GetJoy">
                  <subNodes>
                    <li Class="JobGiver_GetJoy"/>
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <!--============= Downed ============-->
  
  <ThinkTreeDef>
    <defName>Downed</defName>
    <thinkRoot Class="ThinkNode_ConditionalDowned">
      <subNodes>
        <!-- Do a queued job if possible -->
        <li Class="ThinkNode_QueuedJob">
          <inBedOnly>true</inBedOnly>
        </li>

        <li Class="JobGiver_IdleForever"/>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <!--============= Burning ============-->
  
  <ThinkTreeDef>
    <defName>BurningResponse</defName>
    <thinkRoot Class="ThinkNode_ConditionalBurning">
      <subNodes>
        <li Class="ThinkNode_Priority">
          <subNodes>
            <li Class="ThinkNode_ConditionalIntelligence">
              <minIntelligence>ToolUser</minIntelligence>
              <subNodes>
                <li Class="JobGiver_JumpInWater" />
              </subNodes>
            </li>
            <li Class="JobGiver_ExtinguishSelf" />
            <li Class="JobGiver_RunRandom">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <!--============= Dig out if I can't reach map edge ===========-->
  
  <ThinkTreeDef>
    <defName>DigOutIfCannotReachMapEdge</defName>
    <thinkRoot Class="ThinkNode_ConditionalCannotReachMapEdge">
      <subNodes>
        <li Class="ThinkNode_Tagger">
          <tagToGive>Misc</tagToGive>
          <subNodes>
            <li Class="JobGiver_ExitMapBest">
              <defaultLocomotion>Walk</defaultLocomotion>
              <forceCanDig>true</forceCanDig>
              <canBash>true</canBash>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <!--============= Mental states (critical) ============-->
  
  <ThinkTreeDef>
    <defName>MentalStateCritical</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>InMentalState</tagToGive>
      <subNodes>
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Berserk</state>
          <subNodes>
            <li Class="ThinkNode_Priority">
              <subNodes>
                <li Class="JobGiver_Berserk" />
                <li Class="JobGiver_WanderAnywhere">
                  <maxDanger>Deadly</maxDanger>
                </li>
                </subNodes>
            </li>
          </subNodes>
        </li>
        <li Class="ThinkNode_ConditionalMentalState" MayRequire="Ludeon.RimWorld.Ideology">
          <state>BerserkTrance</state>
          <subNodes>
            <li Class="ThinkNode_Priority">
              <subNodes>
                <li Class="JobGiver_Berserk" />
                <li Class="JobGiver_WanderAnywhere">
                  <maxDanger>Deadly</maxDanger>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        <li Class="ThinkNode_ConditionalMentalState">
          <state>SocialFighting</state>
          <subNodes>
            <li Class="ThinkNode_Priority">
              <subNodes>
                <li Class="JobGiver_SocialFighting" />
                <li Class="JobGiver_WanderAnywhere">
                  <maxDanger>Deadly</maxDanger>
                </li>
                </subNodes>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>


  <!--============= Mental states (non-critical) ============-->

  <ThinkTreeDef>
    <defName>MentalStateNonCritical</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>InMentalState</tagToGive>
      <subNodes>
        <!-- Various wanders  -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Wander_Psychotic</state>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Wander_Sad</state>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        <li Class="ThinkNode_ConditionalMentalState">
          <state>WanderConfused</state>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        
        <!-- Hide in room -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Wander_OwnRoom</state>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderOwnRoom">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        
        <!-- Binging on drug -->
        <li Class="ThinkNode_ConditionalMentalStates">
          <states>
            <li>Binging_DrugMajor</li>
            <li>Binging_DrugExtreme</li>
          </states>
          <subNodes>
            <!-- We can't put GetRest in the priority sorter because then the player can just assign the pawn to sleep,
                and they'll go to sleep immediately and end the binging state. So, instead, we have the pawn sleep if and only if
                exhausted-->
            <li Class="ThinkNode_ConditionalExhausted">
              <subNodes>
                <li Class="JobGiver_GetRest"/>
              </subNodes>
            </li>
            <li Class="ThinkNode_PrioritySorter">
              <minPriority>0.5</minPriority>
              <subNodes>
                <li Class="JobGiver_GetFood"/>
                <li Class="JobGiver_SatisfyChemicalNeed"/>
                <li Class="ThinkNode_Priority_GetJoy">
                  <subNodes>
                    <li Class="JobGiver_GetJoy"/>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_BingeDrug"/>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Binging on food -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Binging_Food</state>
          <subNodes>
            <li Class="ThinkNode_PrioritySorter">
              <minPriority>0.5</minPriority>
              <subNodes>
                <li Class="JobGiver_GetFood"/>
                <li Class="JobGiver_SatisfyChemicalNeed"/>
                <li Class="ThinkNode_Priority_GetJoy">
                  <subNodes>
                    <li Class="JobGiver_GetJoy"/>
                  </subNodes>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_BingeFood"/>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>
        
        <!-- Manhunter -->
        <li Class="ThinkNode_ConditionalMentalStateClass">
          <stateClass>MentalState_Manhunter</stateClass>
          <subNodes>
            <li Class="ThinkNode_Priority">
              <subNodes>
                <li Class="ThinkNode_PrioritySorter">
                  <subNodes>
                    <li Class="JobGiver_GetFood">
                      <minCategory>Starving</minCategory>
                    </li>
                  </subNodes>
                </li>
                <li Class="JobGiver_Manhunter" />
                <li Class="JobGiver_WanderAnywhere">
                  <maxDanger>Deadly</maxDanger>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- Panic flee -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>PanicFlee</state>
          <subNodes>
            <li Class="JobGiver_ExitMapPanic" />
            <li Class="JobGiver_WanderAnywhere">
              <!-- Can happen if there is no way to exit the map -->
              <maxDanger>Some</maxDanger>
              <locomotionUrgency>Jog</locomotionUrgency>
            </li>
          </subNodes>
        </li>

        <!-- Give up and leave -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>GiveUpExit</state>
          <subNodes>
            <li Class="JobGiver_ExitMapRandom">
              <defaultLocomotion>Walk</defaultLocomotion>
            </li>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>

        <!-- Roaming: slowly wander to edge then exit -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Roaming</state>
          <subNodes>
            <li Class="ThinkNode_Priority">
              <subNodes>
                <!--
                 Roaming animals should willingly follow their roper, if any, rather than wandering off.
                 Roamers will exit the roaming mental state when they enter an enclosed area.
                 -->
                <li Class="ThinkNode_ConditionalRoped">
                  <subNodes>
                    <li Class="JobGiver_FollowRoper"/>
                    <li Class="JobGiver_WanderRoped"/>
                  </subNodes>
                </li>
                <li Class="ThinkNode_PrioritySorter">
                  <subNodes>
                    <li Class="JobGiver_GetFood">
                      <minCategory>UrgentlyHungry</minCategory>
                    </li>
                    <li Class="JobGiver_GetRest">
                      <minCategory>VeryTired</minCategory>
                    </li>
                  </subNodes>
                </li>
                <li Class="ThinkNode_ConditionalRandom">
                  <chance>0.5</chance>
                  <subNodes>
                    <li Class="JobGiver_WanderAnywhere">
                      <locomotionUrgency>Amble</locomotionUrgency>
                      <expiryInterval>560</expiryInterval>
                      <ticksBetweenWandersRange>125~200</ticksBetweenWandersRange>
                    </li>
                  </subNodes>
                </li>
                <li Class="JobGiver_WanderNearRoamingExit">
                  <locomotionUrgency>Amble</locomotionUrgency>
                  <ticksBetweenWandersRange>125~200</ticksBetweenWandersRange>
                  <expiryInterval>560</expiryInterval>
                </li>
                <li Class="JobGiver_ExitMapBest">
                  <defaultLocomotion>Amble</defaultLocomotion>
                  <jobMaxDuration>1200</jobMaxDuration>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>

        <!-- Fire starting spree -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>FireStartingSpree</state>
          <subNodes>
            <li Class="JobGiver_FireStartingSpree" />
          </subNodes>
        </li>

        <!-- Insulting spree -->
        <li Class="ThinkNode_ConditionalMentalStateClass">
          <stateClass>MentalState_InsultingSpree</stateClass>
          <subNodes>
            <li Class="JobGiver_InsultingSpree" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Tantrum -->
        <li Class="ThinkNode_ConditionalMentalStateClass">
          <stateClass>MentalState_Tantrum</stateClass>
          <subNodes>
            <li Class="JobGiver_Tantrum" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Corpse obsession -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>CorpseObsession</state>
          <subNodes>
            <li Class="JobGiver_HaulCorpseToPublicPlace" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Jailbreaker -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Jailbreaker</state>
          <subNodes>
            <li Class="JobGiver_InducePrisonerToEscape" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Slaughterer -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>Slaughterer</state>
          <subNodes>
            <li Class="JobGiver_SlaughterRandomAnimal" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Murderous rage -->
        <li Class="ThinkNode_ConditionalMentalState">
          <state>MurderousRage</state>
          <subNodes>
            <li Class="JobGiver_MurderousRage" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>

        <!-- Slave rebel -->
        <li Class="ThinkNode_ConditionalMentalState" MayRequire="Ludeon.RimWorld.Ideology" >
          <state>Rebellion</state>
          <subNodes>
            <li Class="JobGiver_InduceSlaveToRebel" />
            <li Class="ThinkNode_PrioritySorter">
              <subNodes>
                <li Class="JobGiver_GetFood">
                  <maxLevelPercentage>0.05</maxLevelPercentage>
                </li>
                <li Class="JobGiver_GetRest">
                  <maxLevelPercentage>0.15</maxLevelPercentage>
                </li>
              </subNodes>
            </li>
            <li Class="JobGiver_WanderColony" />
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
 
  <!--============= Animal leave map if out of season ============-->
  
  <ThinkTreeDef>
    <defName>LeaveIfWrongSeason</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>Misc</tagToGive>
      <subNodes>
        <li Class="ThinkNode_ConditionalAnimalWrongSeason">
          <subNodes>
            <li Class="JobGiver_ExitMapRandom">
              <defaultLocomotion>Walk</defaultLocomotion>
            </li>
          </subNodes>
        </li>
        <li Class="ThinkNode_ConditionalDangerousTemperature">
          <subNodes>
            <li Class="ThinkNode_ConditionalOutdoorTemperature">
              <subNodes>
                <li Class="JobGiver_ExitMapRandom">
                  <defaultLocomotion>Jog</defaultLocomotion>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <!--============= Leave map if starving ============-->
  
  <ThinkTreeDef>
    <defName>LeaveIfStarving</defName>
    <thinkRoot Class="ThinkNode_ConditionalStarving">
      <subNodes>
        <li Class="ThinkNode_ConditionalCanReachMapEdge">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>SatisfyingNeeds</tagToGive>
              <subNodes>
                <li Class="JobGiver_GetFood"> <!-- One last chance to find some food -->
                  <forceScanWholeMap>true</forceScanWholeMap>
                </li>
              </subNodes>
            </li>
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>Misc</tagToGive>
              <subNodes>
                <li Class="JobGiver_ExitMapRandom">
                  <defaultLocomotion>Walk</defaultLocomotion>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef> 

  <!--============= Satisfy basic needs ============-->
  
  <ThinkTreeDef>
    <defName>SatisfyBasicNeeds</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>SatisfyingNeeds</tagToGive>
      <subNodes>
        <li Class="ThinkNode_PrioritySorter">
          <subNodes>
            <li Class="JobGiver_GetFood"/>
            <li Class="JobGiver_GetRest"/>
            <li Class="JobGiver_SatisfyChemicalNeed"/>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef> 
  
  <!--============= Satisfy basic needs and work ============-->
  
  <ThinkTreeDef>
    <defName>SatisfyBasicNeedsAndWork</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>SatisfyingNeeds</tagToGive> <!-- note that JobGiver_Work will assign its own tag -->
      <subNodes>
        <li Class="ThinkNode_PrioritySorter">
          <subNodes>
            <li Class="JobGiver_GetFood"/>
            <li Class="JobGiver_GetRest"/>
            <li Class="JobGiver_SatisfyChemicalNeed"/>
            <li Class="JobGiver_Work"/>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef> 
  
  <!--============= Satisfy very urgent needs ============-->
  
  <ThinkTreeDef>
    <defName>SatisfyVeryUrgentNeeds</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>SatisfyingNeeds</tagToGive>
      <subNodes>
        <li Class="ThinkNode_PrioritySorter">
          <subNodes>
            <li Class="JobGiver_GetFood">
              <minCategory>UrgentlyHungry</minCategory>
            </li>
            <li Class="JobGiver_GetRest">
              <minCategory>VeryTired</minCategory>
            </li>
            <li Class="JobGiver_SatisfyChemicalNeed" />
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef> 
  
  <!--============= Join auto joinable caravan ============-->
  
  <ThinkTreeDef>
    <defName>JoinAutoJoinableCaravan</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>JoiningCaravan</tagToGive>
      <subNodes>
        <!-- If in non-PlayerHomeMap -->
        <li Class="ThinkNode_ConditionalInNonPlayerHomeMap">
          <subNodes>
            <!-- Not a player controlled colonist -->
            <li Class="ThinkNode_ConditionalPlayerControlledColonist">
              <invert>true</invert>
              <subNodes>
                <!-- Of player faction, guest, or prisoner of colony -->
                <li Class="ThinkNode_ConditionalOfPlayerFactionOrPlayerGuestOrPlayerPrisoner">
                  <subNodes>
                    <!-- There is a caravan nearby -->
                    <li Class="ThinkNode_ConditionalAnyAutoJoinableCaravan">
                      <subNodes>
                        <!-- Exit map and join the caravan -->
                        <li Class="JobGiver_ExitMapBest">
                          <failIfCantJoinOrCreateCaravan>true</failIfCantJoinOrCreateCaravan> <!-- in case the caravan moves before we manage to exit the map -->
                          <defaultLocomotion>Sprint</defaultLocomotion>
                        </li>
                      </subNodes>
                    </li>

                    <!-- Any colonist is now on his way to exit the map -> prepare to exit -->
                    <li Class="ThinkNode_ConditionalAnyColonistTryingToExitMap">
                      <subNodes>
                        <!-- Only if we're not currently following our master -->
                        <li Class="ThinkNode_ConditionalShouldFollowMaster">
                          <invert>true</invert>
                          <subNodes>
                            <!-- Wander near the map edge -->
                            <li Class="JobGiver_WanderMapEdge">
                              <locomotionUrgency>Jog</locomotionUrgency>
                              <maxDanger>Deadly</maxDanger>
                            </li>
                          </subNodes>
                        </li>
                      </subNodes>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <!--============= Deal with being roped ============-->

  <ThinkTreeDef>
    <defName>RopedPawn</defName>
    <thinkRoot Class="ThinkNode_Tagger">
      <tagToGive>Misc</tagToGive>
      <subNodes>
        <li Class="ThinkNode_ConditionalRoped">
          <subNodes>
            <li Class="JobGiver_FollowRoper"/>
            <li Class="JobGiver_WanderRoped"/>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <!--============= Test of insertion hooks ============-->
  
  <!-- If you remove the comments around this, it will inject
      this AI control node into all ThinkTrees where there is an
      insertion hook seeking a matching InsertTag.
      
      If there are several injections, they'll be ordered by priorty (highest first).
      
      This example just makes colonists beat on each other, but modders
      can add any behavior using these and they'll all work together.-->
  <!--
  <ThinkTreeDef>
    <defName>InsertHookTest</defName>
    <insertTag>Humanlike_PostMentalState</insertTag>
    <insertPriority>100</insertPriority>
    <thinkRoot Class="JobGiver_Berserk" />
  </ThinkTreeDef>
  -->

</Defs>
